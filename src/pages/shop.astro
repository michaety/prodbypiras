---
// Shop page displaying all products (beats, samples, packs)
import '@/styles/globals.css';
import { ShopListingService } from '@/lib/services/shop-listing';
import { Music, ShoppingCart, Mail, Play } from 'lucide-react';

export const prerender = false;

const { DB } = Astro.locals.runtime.env;

// Fetch all shop listings from D1
const shopListingService = new ShopListingService(DB);
const listings = await shopListingService.getAll();
---

<script is:inline>
  // Theme setup - force dark mode
  document.documentElement.classList.add('dark');
</script>

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Shop beats, samples, and production packs" />
    <title>Shop - Producer Portfolio</title>
  </head>
  <body>
    <!-- Navigation -->
    <nav class="sticky top-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border">
      <div class="container mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <a href="/" class="text-2xl font-bold hover-accent">Producer</a>
          <div class="flex items-center gap-6">
            <a href="/shop" class="text-sm font-medium text-primary flex items-center gap-2">
              Shop
            </a>
            <a href="/cart" class="text-sm font-medium hover-accent flex items-center gap-2">
              <ShoppingCart className="w-4 h-4" /> Cart <span id="cart-count" class="text-xs px-2 py-0.5 bg-primary text-primary-foreground rounded-full">0</span>
            </a>
            <a href="/contact" class="text-sm font-medium hover-accent flex items-center gap-2">
              <Mail className="w-4 h-4" /> Contact
            </a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Shop Header -->
    <section class="container mx-auto px-6 py-12">
      <div class="max-w-3xl">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">
          Shop <span class="text-primary">Beats & Samples</span>
        </h1>
        <p class="text-lg text-muted-foreground">
          Browse our collection of high-quality beats, samples, and production packs
        </p>
      </div>
    </section>

    <!-- Shop Grid -->
    <section class="container mx-auto px-6 pb-16">
      {listings.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {listings.map((listing: any) => (
            <div class="group">
              <div class="bg-card rounded-lg overflow-hidden border border-border hover:border-primary transition-all hover:shadow-lg hover:shadow-primary/20">
                {/* Image/Cover */}
                <div class="relative">
                  {listing.image_url ? (
                    <img 
                      src={listing.image_url} 
                      alt={listing.title}
                      class="w-full aspect-square object-cover"
                    />
                  ) : (
                    <div class="w-full aspect-square bg-muted flex items-center justify-center">
                      <Music className="w-16 h-16 text-muted-foreground" />
                    </div>
                  )}
                  {/* Preview audio player overlay */}
                  {listing.preview_audio_url && (
                    <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                      <button 
                        class="audio-play-btn bg-primary text-primary-foreground p-4 rounded-full hover:scale-110 transition-transform"
                        data-audio-url={listing.preview_audio_url}
                        data-listing-id={listing.id}
                      >
                        <svg class="play-icon w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <svg class="pause-icon w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </button>
                    </div>
                  )}
                  {/* Audio timeline/scrub bar */}
                  {listing.preview_audio_url && (
                    <div class="absolute bottom-0 left-0 right-0 h-1 bg-gray-800/80 opacity-0 group-hover:opacity-100 transition-opacity">
                      <div 
                        class="audio-progress h-full bg-primary transition-all duration-100"
                        data-listing-id={listing.id}
                        style="width: 0%"
                      ></div>
                    </div>
                  )}
                </div>

                {/* Details */}
                <div class="p-4 space-y-3">
                  <div>
                    <h3 class="font-semibold text-lg group-hover:text-primary transition-colors line-clamp-1">
                      {listing.title}
                    </h3>
                    {listing.description && (
                      <p class="text-sm text-muted-foreground line-clamp-2 mt-1">
                        {listing.description}
                      </p>
                    )}
                  </div>

                  {/* Metadata tags */}
                  <div class="flex flex-wrap items-center gap-2 text-xs">
                    <span class="px-2 py-1 bg-muted rounded font-medium">{listing.type}</span>
                    {listing.length && <span class="text-muted-foreground">{listing.length}</span>}
                    {listing.bpm && <span class="text-muted-foreground">{listing.bpm} BPM</span>}
                    {listing.key && <span class="text-muted-foreground">{listing.key}</span>}
                  </div>

                  {/* Price and action buttons */}
                  <div class="pt-2 border-t border-border space-y-2">
                    <div class="flex items-center justify-between">
                      <span class="text-xl font-bold text-primary">
                        ${listing.price ? Number(listing.price).toFixed(2) : '0.00'}
                      </span>
                    </div>
                    <div class="flex gap-2">
                      <button 
                        onclick={`addToCart(${listing.id})`}
                        class="flex-1 px-4 py-2 bg-card border border-primary text-primary rounded-lg hover:bg-primary hover:text-primary-foreground transition-colors font-medium"
                      >
                        Add to Cart
                      </button>
                      <a 
                        href={`/api/create-checkout-session?listing_id=${listing.id}`}
                        class="flex-1 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium text-center"
                      >
                        Buy Now
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center py-20 text-muted-foreground">
          <Music className="w-20 h-20 mx-auto mb-6 opacity-50" />
          <h2 class="text-2xl font-semibold mb-2">No Products Yet</h2>
          <p>Check back soon for new beats and samples!</p>
        </div>
      )}
    </section>

    <!-- Audio preview player (hidden) -->
    <audio id="preview-player" class="hidden"></audio>

    <!-- Footer -->
    <footer class="border-t border-border mt-20">
      <div class="container mx-auto px-6 py-8">
        <p class="text-center text-muted-foreground text-sm">
          Â© {new Date().getFullYear()} Producer Portfolio. All rights reserved.
        </p>
      </div>
    </footer>

    <script>
      // Import toast notification system
      import { showSuccessToast, showErrorToast } from '@/lib/toast';

      // Audio preview functionality with play/pause toggle and timeline
      let currentAudio: HTMLAudioElement | null = null;
      let currentButton: HTMLButtonElement | null = null;
      let currentListingId: number | null = null;

      // Initialize audio player
      const audioPlayer = document.getElementById('preview-player') as HTMLAudioElement;

      // Handle play button clicks
      document.querySelectorAll('.audio-play-btn').forEach((btn) => {
        const button = btn as HTMLButtonElement;
        button.addEventListener('click', () => {
          const audioUrl = button.getAttribute('data-audio-url');
          const listingId = parseInt(button.getAttribute('data-listing-id') || '0');
          
          if (!audioPlayer || !audioUrl) return;

          // Toggle pause if same audio is playing
          if (currentListingId === listingId && !audioPlayer.paused) {
            audioPlayer.pause();
            updatePlayPauseButton(button, false);
            currentAudio = null;
            currentButton = null;
            currentListingId = null;
          } else {
            // Stop previous audio and reset its button
            if (currentButton && currentButton !== button) {
              updatePlayPauseButton(currentButton, false);
            }
            
            // Play new audio
            audioPlayer.src = audioUrl;
            audioPlayer.play();
            updatePlayPauseButton(button, true);
            currentAudio = audioPlayer;
            currentButton = button;
            currentListingId = listingId;
          }
        });
      });

      // Update play/pause button icon
      function updatePlayPauseButton(button: HTMLButtonElement, isPlaying: boolean) {
        const playIcon = button.querySelector('.play-icon');
        const pauseIcon = button.querySelector('.pause-icon');
        
        if (playIcon && pauseIcon) {
          if (isPlaying) {
            playIcon.classList.add('hidden');
            pauseIcon.classList.remove('hidden');
          } else {
            playIcon.classList.remove('hidden');
            pauseIcon.classList.add('hidden');
          }
        }
      }

      // Update timeline progress
      if (audioPlayer) {
        audioPlayer.addEventListener('timeupdate', () => {
          if (currentListingId !== null) {
            const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            const progressBar = document.querySelector(
              `.audio-progress[data-listing-id="${currentListingId}"]`
            ) as HTMLElement;
            
            if (progressBar) {
              progressBar.style.width = `${progress}%`;
            }
          }
        });

        // Reset button when audio ends
        audioPlayer.addEventListener('ended', () => {
          if (currentButton) {
            updatePlayPauseButton(currentButton, false);
          }
          if (currentListingId !== null) {
            const progressBar = document.querySelector(
              `.audio-progress[data-listing-id="${currentListingId}"]`
            ) as HTMLElement;
            if (progressBar) {
              progressBar.style.width = '0%';
            }
          }
          currentAudio = null;
          currentButton = null;
          currentListingId = null;
        });
      }

      // Add to cart functionality with toast notification
      (window as any).addToCart = async function(id: number) {
        try {
          const response = await fetch('/api/cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, action: 'add' }),
          });

          if (response.ok) {
            const data = await response.json();
            // Update cart count
            const cartCount = document.getElementById('cart-count');
            if (cartCount) {
              cartCount.textContent = data.cart.length.toString();
            }
            // Show success toast notification
            showSuccessToast('Item added to cart!');
          } else {
            showErrorToast('Failed to add to cart. Please try again.');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          showErrorToast('An error occurred. Please try again.');
        }
      };

      // Load cart count on page load
      async function loadCartCount() {
        try {
          const response = await fetch('/api/cart');
          if (response.ok) {
            const data = await response.json();
            const cartCount = document.getElementById('cart-count');
            if (cartCount) {
              cartCount.textContent = data.cart.length.toString();
            }
          }
        } catch (error) {
          console.error('Error loading cart:', error);
        }
      }

      loadCartCount();
    </script>
  </body>
</html>
