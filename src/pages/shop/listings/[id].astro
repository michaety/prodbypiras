---
// Dedicated listing page with track list, previews, details, and waveform generation
import '@/styles/globals.css';
import { ShopListingService } from '@/lib/services/shop-listing';
import { TrackService } from '@/lib/services/track';
import { Music, ShoppingCart, Mail, Play, Pause } from 'lucide-react';

export const prerender = false;

const { id } = Astro.params;
const { DB } = Astro.locals.runtime.env;

if (!id) {
  return Astro.redirect('/shop');
}

// Fetch listing and its tracks from D1
const shopListingService = new ShopListingService(DB);
const trackService = new TrackService(DB);

const listing = await shopListingService.getById(parseInt(id));
const tracks = await trackService.getByListingId(parseInt(id));

if (!listing) {
  return Astro.redirect('/shop');
}
---

<script is:inline>
  // Theme setup - force dark mode
  document.documentElement.classList.add('dark');
</script>

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={listing.description || `${listing.title} - Beat details`} />
    <title>{listing.title} - Producer Portfolio</title>
  </head>
  <body>
    <!-- Navigation -->
    <nav class="sticky top-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border">
      <div class="container mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <a href="/" class="text-2xl font-bold hover-accent">Producer</a>
          <div class="flex items-center gap-6">
            <a href="/shop" class="text-sm font-medium hover-accent">Shop</a>
            <a href="/cart" class="text-sm font-medium hover-accent flex items-center gap-2">
              <ShoppingCart className="w-4 h-4" /> Cart
            </a>
            <a href="/contact" class="text-sm font-medium hover-accent flex items-center gap-2">
              <Mail className="w-4 h-4" /> Contact
            </a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Listing Details Section -->
    <section class="container mx-auto px-6 py-12">
      <div class="max-w-6xl mx-auto">
        <!-- Back to Shop Link -->
        <a 
          href="/shop" 
          class="inline-flex items-center gap-2 text-muted-foreground hover:text-primary mb-8 transition-colors"
        >
          ‚Üê Back to Shop
        </a>

        <!-- Main Listing Card -->
        <div class="bg-card rounded-lg border border-border overflow-hidden">
          <div class="grid md:grid-cols-2 gap-8 p-8">
            <!-- Image -->
            <div>
              {listing.image_url ? (
                <img 
                  src={listing.image_url} 
                  alt={listing.title}
                  class="w-full aspect-square object-cover rounded-lg"
                />
              ) : (
                <div class="w-full aspect-square bg-muted flex items-center justify-center rounded-lg">
                  <Music className="w-24 h-24 text-muted-foreground" />
                </div>
              )}

              {/* Main Waveform for preview audio */}
              {listing.preview_audio_url && (
                <div class="mt-6 space-y-3">
                  <h3 class="font-semibold text-lg">Preview</h3>
                  <div class="bg-background rounded-lg p-4 border border-border">
                    <div id="waveform-preview" class="mb-3"></div>
                    <div class="flex items-center gap-3">
                      <button 
                        id="play-preview-btn"
                        class="flex-shrink-0 p-3 bg-primary text-primary-foreground rounded-full hover:bg-primary/90 transition-colors"
                      >
                        <Play className="w-5 h-5" id="preview-play-icon" />
                        <Pause className="w-5 h-5 hidden" id="preview-pause-icon" />
                      </button>
                      <div class="flex-1 text-sm text-muted-foreground">
                        <span id="preview-current-time">0:00</span> / <span id="preview-duration">0:00</span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <!-- Details -->
            <div class="space-y-6">
              <div>
                <h1 class="text-4xl font-bold mb-3">{listing.title}</h1>
                {listing.featured && (
                  <span class="inline-block px-3 py-1 bg-primary/20 text-primary rounded-full text-sm font-medium">
                    ‚≠ê Featured
                  </span>
                )}
              </div>

              {listing.description && (
                <p class="text-muted-foreground leading-relaxed">{listing.description}</p>
              )}

              {/* Metadata Grid */}
              <div class="grid grid-cols-2 gap-4">
                <div class="px-4 py-3 bg-muted rounded-lg">
                  <span class="text-sm text-muted-foreground">Type</span>
                  <p class="font-semibold capitalize">{listing.type}</p>
                </div>
                {listing.length && (
                  <div class="px-4 py-3 bg-muted rounded-lg">
                    <span class="text-sm text-muted-foreground">Length</span>
                    <p class="font-semibold">{listing.length}</p>
                  </div>
                )}
                {listing.bpm && (
                  <div class="px-4 py-3 bg-muted rounded-lg">
                    <span class="text-sm text-muted-foreground">BPM</span>
                    <p class="font-semibold">{listing.bpm}</p>
                  </div>
                )}
                {listing.key && (
                  <div class="px-4 py-3 bg-muted rounded-lg">
                    <span class="text-sm text-muted-foreground">Key</span>
                    <p class="font-semibold">{listing.key}</p>
                  </div>
                )}
              </div>

              {/* Price and CTA */}
              <div class="pt-6 border-t border-border space-y-4">
                <div class="text-4xl font-bold text-primary">
                  ${listing.price ? Number(listing.price).toFixed(2) : '0.00'}
                </div>
                <div class="flex gap-3">
                  <button 
                    onclick={`addToCart(${listing.id})`}
                    class="flex-1 px-6 py-4 bg-card border-2 border-primary text-primary rounded-lg hover:bg-primary hover:text-primary-foreground transition-colors font-semibold"
                  >
                    Add to Cart
                  </button>
                  <a 
                    href={`/api/create-checkout-session?listing_id=${listing.id}`}
                    class="flex-1 px-6 py-4 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-semibold text-center"
                  >
                    Buy Now
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Track List Section (if multiple tracks) -->
        {tracks.length > 0 && (
          <div class="bg-card rounded-lg border border-border p-8 mt-8">
            <h2 class="text-2xl font-bold mb-6">Track List ({tracks.length} tracks)</h2>
            <div class="space-y-4">
              {tracks.map((track: any, index: number) => (
                <div class="bg-background rounded-lg border border-border p-5 hover:border-primary transition-all">
                  <div class="flex items-center gap-4 mb-4">
                    {/* Track Number */}
                    <div class="flex-shrink-0 w-10 h-10 flex items-center justify-center bg-muted rounded-lg font-bold text-lg">
                      {index + 1}
                    </div>

                    {/* Track Info */}
                    <div class="flex-1 min-w-0">
                      <h3 class="font-semibold text-lg mb-1">{track.title}</h3>
                      <div class="flex flex-wrap items-center gap-3 text-sm text-muted-foreground">
                        {track.length && <span>‚è±Ô∏è {track.length}</span>}
                        {track.bpm && <span>üéµ {track.bpm} BPM</span>}
                        {track.key && <span>üéπ {track.key}</span>}
                      </div>
                    </div>
                  </div>

                  {/* Waveform for each track */}
                  {track.audio_url && (
                    <div class="space-y-3">
                      <div id={`waveform-${track.id}`} class="bg-background/50 rounded"></div>
                      <div class="flex items-center gap-3">
                        <button 
                          class="track-play-btn flex-shrink-0 p-2 bg-primary text-primary-foreground rounded-full hover:bg-primary/90 transition-colors"
                          data-track-id={track.id}
                          data-audio-url={track.audio_url}
                        >
                          <Play className="w-4 h-4 play-icon" />
                          <Pause className="w-4 h-4 pause-icon hidden" />
                        </button>
                        <div class="flex-1 text-sm text-muted-foreground">
                          <span class="track-current-time">0:00</span> / <span class="track-duration">0:00</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </section>

    <!-- Footer -->
    <footer class="border-t border-border mt-20">
      <div class="container mx-auto px-6 py-8">
        <p class="text-center text-muted-foreground text-sm">
          ¬© {new Date().getFullYear()} Producer Portfolio. All rights reserved.
        </p>
      </div>
    </footer>

    <script>
      // Import WaveSurfer for waveform generation
      import WaveSurfer from 'wavesurfer.js';
      import { showSuccessToast, showErrorToast } from '@/lib/toast';

      // Format time helper
      function formatTime(seconds: number): string {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
      }

      // Initialize preview waveform if available
      const previewAudioUrl = document.getElementById('waveform-preview')?.getAttribute('data-url');
      let previewWavesurfer: WaveSurfer | null = null;

      if (document.getElementById('waveform-preview')) {
        const audioUrl = document.querySelector('[data-audio-url]')?.getAttribute('data-audio-url');
        if (audioUrl) {
          previewWavesurfer = WaveSurfer.create({
            container: '#waveform-preview',
            waveColor: 'rgb(147, 51, 234)',
            progressColor: 'rgb(168, 85, 247)',
            cursorColor: 'rgb(168, 85, 247)',
            barWidth: 2,
            barRadius: 3,
            cursorWidth: 1,
            height: 80,
            barGap: 2,
          });

          previewWavesurfer.load(audioUrl);

          // Update time display
          previewWavesurfer.on('ready', () => {
            const duration = previewWavesurfer?.getDuration() || 0;
            const durationEl = document.getElementById('preview-duration');
            if (durationEl) {
              durationEl.textContent = formatTime(duration);
            }
          });

          previewWavesurfer.on('timeupdate', (currentTime) => {
            const currentTimeEl = document.getElementById('preview-current-time');
            if (currentTimeEl) {
              currentTimeEl.textContent = formatTime(currentTime);
            }
          });

          // Play/pause button
          const playBtn = document.getElementById('play-preview-btn');
          const playIcon = document.getElementById('preview-play-icon');
          const pauseIcon = document.getElementById('preview-pause-icon');

          playBtn?.addEventListener('click', () => {
            previewWavesurfer?.playPause();
            
            if (previewWavesurfer?.isPlaying()) {
              playIcon?.classList.add('hidden');
              pauseIcon?.classList.remove('hidden');
            } else {
              playIcon?.classList.remove('hidden');
              pauseIcon?.classList.add('hidden');
            }
          });

          previewWavesurfer.on('finish', () => {
            playIcon?.classList.remove('hidden');
            pauseIcon?.classList.add('hidden');
          });
        }
      }

      // Initialize waveforms for each track
      const trackWavesurfers: Map<number, WaveSurfer> = new Map();

      document.querySelectorAll('[id^="waveform-"]').forEach((container) => {
        const trackId = parseInt(container.id.replace('waveform-', ''));
        if (isNaN(trackId)) return;

        const playBtn = document.querySelector(`.track-play-btn[data-track-id="${trackId}"]`);
        const audioUrl = playBtn?.getAttribute('data-audio-url');

        if (!audioUrl) return;

        const wavesurfer = WaveSurfer.create({
          container: `#waveform-${trackId}`,
          waveColor: 'rgb(147, 51, 234)',
          progressColor: 'rgb(168, 85, 247)',
          cursorColor: 'rgb(168, 85, 247)',
          barWidth: 2,
          barRadius: 3,
          cursorWidth: 1,
          height: 60,
          barGap: 2,
        });

        wavesurfer.load(audioUrl);
        trackWavesurfers.set(trackId, wavesurfer);

        // Update time displays
        wavesurfer.on('ready', () => {
          const duration = wavesurfer.getDuration();
          const parent = container.closest('.bg-background');
          const durationEl = parent?.querySelector('.track-duration');
          if (durationEl) {
            durationEl.textContent = formatTime(duration);
          }
        });

        wavesurfer.on('timeupdate', (currentTime) => {
          const parent = container.closest('.bg-background');
          const currentTimeEl = parent?.querySelector('.track-current-time');
          if (currentTimeEl) {
            currentTimeEl.textContent = formatTime(currentTime);
          }
        });

        wavesurfer.on('finish', () => {
          const playIcon = playBtn?.querySelector('.play-icon');
          const pauseIcon = playBtn?.querySelector('.pause-icon');
          playIcon?.classList.remove('hidden');
          pauseIcon?.classList.add('hidden');
        });
      });

      // Track play/pause functionality
      document.querySelectorAll('.track-play-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
          const trackId = parseInt(btn.getAttribute('data-track-id') || '0');
          const wavesurfer = trackWavesurfers.get(trackId);
          
          if (!wavesurfer) return;

          // Pause other tracks
          trackWavesurfers.forEach((ws, id) => {
            if (id !== trackId && ws.isPlaying()) {
              ws.pause();
              const otherBtn = document.querySelector(`.track-play-btn[data-track-id="${id}"]`);
              const playIcon = otherBtn?.querySelector('.play-icon');
              const pauseIcon = otherBtn?.querySelector('.pause-icon');
              playIcon?.classList.remove('hidden');
              pauseIcon?.classList.add('hidden');
            }
          });

          // Pause preview if playing
          if (previewWavesurfer?.isPlaying()) {
            previewWavesurfer.pause();
            const playIcon = document.getElementById('preview-play-icon');
            const pauseIcon = document.getElementById('preview-pause-icon');
            playIcon?.classList.remove('hidden');
            pauseIcon?.classList.add('hidden');
          }

          // Toggle current track
          wavesurfer.playPause();
          
          const playIcon = btn.querySelector('.play-icon');
          const pauseIcon = btn.querySelector('.pause-icon');
          
          if (wavesurfer.isPlaying()) {
            playIcon?.classList.add('hidden');
            pauseIcon?.classList.remove('hidden');
          } else {
            playIcon?.classList.remove('hidden');
            pauseIcon?.classList.add('hidden');
          }
        });
      });

      // Add to cart functionality
      (window as any).addToCart = async function(id: number) {
        try {
          const response = await fetch('/api/cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, action: 'add' }),
          });

          if (response.ok) {
            showSuccessToast('Item added to cart!');
          } else {
            showErrorToast('Failed to add to cart. Please try again.');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          showErrorToast('An error occurred. Please try again.');
        }
      };
    </script>
  </body>
</html>
