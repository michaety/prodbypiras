---
// Add new listing form page
import Layout from '@/layouts/Layout.astro';
import { ArrowLeft } from 'lucide-react';

export const prerender = false;
---

<Layout title="Add New Listing">
  <div class="max-w-4xl">
    <!-- Back Button -->
    <a 
      href="/admin"
      class="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-6"
    >
      <ArrowLeft className="w-4 h-4" /> Back to Listings
    </a>

    <!-- Form Card -->
    <div class="bg-card rounded-lg border border-border p-8">
      <h1 class="text-3xl font-bold mb-6">Add New Listing</h1>
      
      <form 
        id="add-listing-form"
        action="/api/admin/add-listing"
        method="POST"
        enctype="multipart/form-data"
        class="space-y-6"
      >
        <!-- Basic Information -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Basic Information</h2>
          
          <div>
            <label for="title" class="block text-sm font-medium mb-2">
              Title <span class="text-destructive">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="e.g., Dark Trap Beat"
            />
          </div>

          <div>
            <label for="type" class="block text-sm font-medium mb-2">
              Type <span class="text-destructive">*</span>
            </label>
            <select
              id="type"
              name="type"
              required
              class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="">Select a type</option>
              <option value="beats">Beats</option>
              <option value="stems">Stems</option>
              <option value="samples">Samples</option>
              <option value="pack">Pack</option>
            </select>
          </div>

          <div>
            <label for="description" class="block text-sm font-medium mb-2">
              Description
            </label>
            <textarea
              id="description"
              name="description"
              rows="3"
              class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="Describe your product..."
            ></textarea>
          </div>
        </div>

        <!-- Music Details -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Music Details</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label for="length" class="block text-sm font-medium mb-2">
                Length
              </label>
              <input
                type="text"
                id="length"
                name="length"
                class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                placeholder="e.g., 3:45"
              />
            </div>

            <div>
              <label for="bpm" class="block text-sm font-medium mb-2">
                BPM
              </label>
              <input
                type="number"
                id="bpm"
                name="bpm"
                min="0"
                max="300"
                class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                placeholder="e.g., 140"
              />
            </div>

            <div>
              <label for="key" class="block text-sm font-medium mb-2">
                Key
              </label>
              <input
                type="text"
                id="key"
                name="key"
                class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                placeholder="e.g., Am, G Major"
              />
            </div>
          </div>
        </div>

        <!-- Pricing -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Pricing</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="price" class="block text-sm font-medium mb-2">
                Price (USD) <span class="text-destructive">*</span>
              </label>
              <input
                type="number"
                id="price"
                name="price"
                step="0.01"
                min="0"
                required
                class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                placeholder="e.g., 29.99"
              />
            </div>

            <div>
              <label for="stripe_price_id" class="block text-sm font-medium mb-2">
                Stripe Price ID
              </label>
              <input
                type="text"
                id="stripe_price_id"
                name="stripe_price_id"
                class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                placeholder="price_xxxxx (optional)"
              />
            </div>
          </div>
        </div>

        <!-- Media Files -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Media Files</h2>
          
          <div>
            <label for="cover_photo" class="block text-sm font-medium mb-2">
              Cover Photo
            </label>
            <input
              type="file"
              id="cover_photo"
              name="cover_photo"
              accept="image/*"
              class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"
            />
            <p class="text-xs text-muted-foreground mt-1">
              Recommended: Square image, min 600x600px
            </p>
          </div>
        </div>

        <!-- Track Files (Required) -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Track Files <span class="text-destructive">*</span></h2>
          <p class="text-sm text-muted-foreground">
            Upload your track files. The preview audio will be automatically limited to 20 seconds from the first track file.
          </p>
          
          <div>
            <label for="track_files" class="block text-sm font-medium mb-2">
              Select Audio Files (Required)
            </label>
            <input
              type="file"
              id="track_files"
              name="track_files"
              accept="audio/*"
              multiple
              required
              class="w-full px-4 py-2 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"
            />
            <p class="text-xs text-muted-foreground mt-1">
              Select one or multiple audio files (MP3, WAV, etc.)
            </p>
          </div>
          
          <div id="selected-files-preview" class="space-y-2 hidden">
            <h3 class="text-sm font-medium">Selected Files:</h3>
            <div id="files-list" class="space-y-1">
              <!-- File list will be shown here -->
            </div>
          </div>
        </div>

        <!-- Display Options -->
        <div class="space-y-4">
          <h2 class="text-xl font-semibold">Display Options</h2>
          
          <div class="flex items-center gap-2">
            <input
              type="checkbox"
              id="featured"
              name="featured"
              value="1"
              class="w-4 h-4 rounded border-border text-primary focus:ring-primary"
            />
            <label for="featured" class="text-sm font-medium">
              Feature on portfolio page
            </label>
          </div>
        </div>

        <!-- Submit Buttons -->
        <div class="flex gap-4 pt-6 border-t border-border">
          <button
            type="submit"
            class="px-6 py-3 bg-primary text-primary-foreground rounded-lg font-semibold hover:bg-primary/90 transition-colors"
          >
            Create Listing
          </button>
          <a
            href="/admin"
            class="px-6 py-3 bg-card border border-border rounded-lg font-semibold hover:border-primary transition-colors"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Import toast notification system
    import { showSuccessToast, showErrorToast } from '@/lib/toast';

    // Handle multiple file selection and show preview
    const trackFilesInput = document.getElementById('track_files') as HTMLInputElement;
    const selectedFilesPreview = document.getElementById('selected-files-preview');
    const filesList = document.getElementById('files-list');

    trackFilesInput?.addEventListener('change', (e) => {
      const input = e.target as HTMLInputElement;
      const files = input.files;
      
      if (!files || files.length === 0 || !filesList || !selectedFilesPreview) return;
      
      // Clear previous preview
      filesList.innerHTML = '';
      
      // Show files list
      selectedFilesPreview.classList.remove('hidden');
      
      // Add each file to the preview
      Array.from(files).forEach((file, index) => {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'flex items-center gap-2 text-sm text-muted-foreground';
        fileDiv.innerHTML = `
          <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
          </svg>
          <span>${index + 1}. ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)</span>
        `;
        filesList.appendChild(fileDiv);
      });
    });

    // Helper function to convert image to WebP format on client-side
    async function convertImageToWebP(file: File): Promise<Blob> {
      return new Promise((resolve, reject) => {
        const img = new Image();
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        img.onload = () => {
          // Calculate dimensions (max 1920px)
          let width = img.width;
          let height = img.height;
          const maxDimension = 1920;

          if (width > maxDimension || height > maxDimension) {
            if (width > height) {
              height = (height / width) * maxDimension;
              width = maxDimension;
            } else {
              width = (width / height) * maxDimension;
              height = maxDimension;
            }
          }

          // Set canvas size and draw image
          canvas.width = width;
          canvas.height = height;
          ctx?.drawImage(img, 0, 0, width, height);

          // Convert to WebP blob
          canvas.toBlob(
            (blob) => {
              if (blob) {
                resolve(blob);
              } else {
                reject(new Error('Failed to convert image to WebP'));
              }
            },
            'image/webp',
            0.85 // Quality: 0.85 is a good balance
          );
        };

        img.onerror = () => reject(new Error('Failed to load image'));
        img.src = URL.createObjectURL(file);
      });
    }

    // Form submission handling with WebP conversion
    const form = document.getElementById('add-listing-form');
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (submitButton) {
        submitButton.textContent = 'Creating...';
        submitButton.disabled = true;
      }

      try {
        const formData = new FormData(form as HTMLFormElement);
        
        // Handle cover photo conversion to WebP
        const coverPhotoInput = document.getElementById('cover_photo') as HTMLInputElement;
        if (coverPhotoInput?.files && coverPhotoInput.files.length > 0) {
          const originalFile = coverPhotoInput.files[0];
          
          // Only convert if it's not already WebP
          if (!originalFile.type.includes('webp')) {
            try {
              const webpBlob = await convertImageToWebP(originalFile);
              const webpFile = new File([webpBlob], originalFile.name.replace(/\.[^/.]+$/, '.webp'), {
                type: 'image/webp',
              });
              formData.set('cover_photo', webpFile);
            } catch (conversionError) {
              console.warn('WebP conversion failed, uploading original:', conversionError);
              // Continue with original file if conversion fails
            }
          }
        }

        const response = await fetch('/api/admin/add-listing', {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Show success toast notification
          showSuccessToast('Listing added successfully!');
          
          // Redirect to admin page after a short delay
          setTimeout(() => {
            window.location.href = '/admin';
          }, 1000);
        } else {
          const errorMessage = result.error || 'Unknown error occurred';
          showErrorToast(`Error creating listing: ${errorMessage}`);
          if (submitButton) {
            submitButton.textContent = 'Create Listing';
            submitButton.disabled = false;
          }
        }
      } catch (error) {
        console.error('Error submitting form:', error);
        showErrorToast('An error occurred. Please try again.');
        if (submitButton) {
          submitButton.textContent = 'Create Listing';
          submitButton.disabled = false;
        }
      }
    });
  </script>
</Layout>
